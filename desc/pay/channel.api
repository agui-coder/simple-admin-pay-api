syntax = "v1"

type (
    ChannelBase{
        status uint32 `json:"status" validate:"inEnum=common_status"`
        remark *string `json:"remark,optional"`
        feeRate float64 `json:"feeRate"`
        appId uint64 `json:"appId"`
    }
    ChannelBaseResp{
        status *uint32 `json:"status"`
        remark *string `json:"remark,optional"`
        feeRate *float64 `json:"feeRate"`
        appId *uint64 `json:"appId"`
    }

    ChannelCreateReq{
        ChannelBase
        code string `json:"code"`
        config string `json:"config"`
    }

    ChannelReq{
        id *uint64 `json:"id,optional"`
        appId *uint64 `json:"appId,optional"`
        code *string `json:"code,optional "`
    }

    ChannelInfo{
        ChannelBaseResp
        id *uint64 `json:"id,optional"`
        code *string `json:"code,optional "`
        createAt *int64 `json:"createAt,optional"`
        config *string `json:"config"`
    }
    ChannelInfoResp{
       BaseDataInfo
       Data ChannelInfo `json:"data"`
    }
    ChannelUpdateReq    {
        ChannelBase
        id uint64 `json:"code"`
        config string `json:"config"`
    }
    ChannelListResp {
        BaseListInfo
        channels []*string `json:"channels"`
    }
)

@server(
    group: channel
    middleware: Authority
    prefix: /pay
)

service Pay{
    // Create channel information | 创建Channel
    @handler createChannel
    post /channel/create (ChannelCreateReq) returns (BaseMsgResp)

    // Update channel information | 更新Channel
    @handler updateChannel
    post /channel/update (ChannelUpdateReq) returns (BaseMsgResp)

    // Delete channel information | 删除Channel信息
    @handler deleteChannel
    post /channel/delete (IDReq) returns (BaseMsgResp)

    // Get channel | 获取Channel 信息
    @handler getChannel
    post /channel/get (ChannelReq) returns (ChannelInfoResp)

    // Get channel by ID | 通过ID获得指定应用的开启的支付渠道编码列表
    @handler getEnableChannelCodeList
    post /channel/get-enable-code-list (IDReq) returns (ChannelListResp)
}